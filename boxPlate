def plate(width as Number height as Number x as Number y as Number radius as Number isFront as Number) =  {
 
  #boundary
  line(x y x y + height)
  line(x y x + width y)
  line(x + width y x + width y + height)
  if(isFront < 1){ #this line is not on front plates
    line(x y + height x + width y + height)
  }
  
  #alternative front plate top
  
  
  #BOTTOM AND TOP HOLES
  def bottomTopHoles(offset as Number) = {
    def yMargin as Number = 10
    def yTop as Number = y - yMargin

    #LEFT SIDE HOLES
    if(isFront < 1){ #this hole is not on front plates
      circle(x + offset yTop + height radius)
    }
    circle(x + offset y + yMargin radius)
    
    #RIGHT SIDE HOLES
    def rightSide = x + width 
    if(isFront < 1){#this hole is not on front plates
      circle(rightSide - offset yTop + height radius)
    }
    circle(rightSide - offset y + yMargin radius)
    
   # CENTER HOLES
    if (width > 200) {
       def center = width / 2
        circle(center + x yTop + height radius)
        circle(center + x y + yMargin radius) 
     }
  }

  #LEFT AND RIGHT HOLES
  def sideHoles(offset as Number) = {
    def xMargin as Number = 10
   def xTop as Number = x - xMargin

    #BOTTOM END HOLES
    circle(xTop + width y + offset radius)
    circle(x + xMargin y + offset radius)
    
    #TOP END HOLES
    def topEnd = y + height 
    circle(xTop + width topEnd - offset radius)
    circle(x + xMargin topEnd - offset radius)
    
   # CENTER HOLES
    if (height > 180) {
       def center = height / 2
        circle(xTop + width center + y radius)
        circle(x + xMargin center + y  radius) 
     }
  }

# CALL THE TWO FUNCTIONS ABOVE TO DRAW HOLES:
 bottomTopHoles(30)
 sideHoles(30)
}

#TEST
#call the function plate
#the last parameter determines if it is a front plate (1) or not (0)
plate(160 250 10 30 3 1)