import font

def d = 64 #CLOCK DIAMETER

def s = d / 100 #scale factor

def fiveSize = 7 * s #FIVE MINUTE MARKS SIZE
def oneSize = 4.5 * s #ONE MINUTE MARKS SIZE
def textSize = 7 * s #SIZE OF THE DIGITS
def innerText = 15 * s #INWARDS OFFSET OF DIGITS
def textOffsetX = -0.4 * s #ADJUSTMENT OF TEXT X
def textOffsetY = 1.8 * s #ADJUSTMENT OF TEXT Y

### END PARAMETERS ###

### START SCRIPT ###

#SIZES FOR 2 1/4 INSTRUMENT CUTOUTS
#def r = 57.15 / 2
#def a = 60.325 / 2
#def b = 66.675 / 2
#def h = 4.318 / 2
#def c = 23.6

#SIZES FOR 3 1/8 INSTRUMENT CUTOUTS
def r = 79.375 / 2
def a = 82.75 / 2
def b = 88.9 / 2
def h = 4.318 / 2
def c = 31.4

line(-1 * a -1 * a -1 * a a)
line(a -1 * a a a)
line(-1 * a a a a)
line(-1 * a -1 * a  a -1 * a)

#helping lines for hole cutouts
#circle(0 0 b)
#line(-1 * a a a -1 * a) # diagonal

#HOLES
circle(-1 * c c h)
circle(c c h)
circle(-1 * c -1 * c h)
circle(c -1 * c h)

#OUTER AND CENTER CIRCLE
circle(0 0 r)
circle(0 0 r - 2) #BEZEL
circle(0 0 1)


#calculate which digit to write
def setChar(x as Number y as Number id as Number ) = {
  if(id < -1) {if(id > -3) {one(x y textSize) five(x + (0.1 * d) y + (0.16 * d) 2)}}
  if(id < 0) {if(id > -2) {two(x y textSize) one(x + (0.14 * d) y + (0.1 * d) 2) zero(x + (0.17 * d) y + (0.1 * d) 2)}}
  if(id < 1) {if(id > -1) {three(x y textSize) one(x + (0.16 * d) y + (0.01 * d) 2) five(x + (0.19 * d) y + (0.01 * d) 2)}}
  if(id < 2) {if(id > 0) {four(x y textSize) two(x + (0.14 * d) y - (0.07 * d) 2) zero(x + (0.17 * d) y - (0.07 * d) 2)}}
  if(id < 3) {if(id > 1) {five(x y textSize) two(x + (0.08 * d) y - (0.12 * d) 2) five(x + (0.11 * d) y - (0.12 * d) 2)}}
  if(id < 4) {if(id > 2) {six(x y textSize) three(x - (0.01 * d) y - (0.14 * d) 2) zero(x + 1.5 y - (0.14 * d) 2)}}
  if(id < 5) {if(id > 3) {seven(x y textSize) three(x - (0.1 * d) y - (0.12 * d) 2) five(x - (0.07 * d) y - (0.12 * d) 2)}}
  if(id < 6) {if(id > 4) {eight(x y textSize) four(x - (0.16 * d) y - (0.06 * d) 2) zero(x - (0.13 * d) y - (0.06 * d) 2)}}
  if(id < 7) {if(id > 5) {nine(x y textSize) four(x - (0.1 * d) y + (0.1 * d) 2) five(x - (0.1 * d) y + (0.1 * d) 2)}}
  if(id < 8) {if(id > 6) {one(x - (textSize / 2) y textSize)
  zero(x + (textSize / 2) y textSize) five(x - (0.1 * d) y + (0.1 * d) 2) zero(x - 6 y + 5 2) }}
  if(id < 9) {if(id > 7) {one(x - (textSize / 2) y textSize)
  five(x - (0.1 * d) y + (0.1 * d) 2) five(x - (0.1 * d) y + (0.1 * d) 2)
  one(x + (textSize / 2) y textSize)}}
  if(id < 10) {if(id > 8) {one(x - (textSize / 2) y textSize)
  six(x - (0.1 * d) y + (0.1 * d) 2) zero(x + (0.1 * d) y + (0.1 * d) 2)
  two(x + (textSize / 2) y textSize)}}
}

def outer = (d / 2) - 1
def innerFive = (d / 2) - fiveSize
def innerOne = (d / 2) - oneSize

#FIVE MINUTE MARKS
repeat -2 to 10 using i {
  def x = -1 * cos(radians(i * 30))
  def y = sin(radians(i * 30))
  line(x * innerFive y * innerFive x * outer y * outer)

  #TEXT
  def textX = (-1 - x * (d / 2) - innerText) - textOffsetX
  def textY = (-1 - y * (d / 2) - innerText) - textOffsetY
  
  setChar(textX textY i)
  
}

#ONE MINUTE MARKS
repeat 0 to 60 using i {
  def x = cos(radians(i * 6))
  def y = sin(radians(i * 6))
  line(x * innerOne y * innerOne x * outer y * outer)
}

def s = d / 100

C(-8 * s 12 * s 5 * s)
L(-4 * s 12 * s 5 * s)
O(0 * s 12 * s 5 * s)
C(4 * s 12 * s 5 * s)
K(8 * s 12 * s 5 * s)

#hour hand
line(-3 0.5 10 1.6)
line(-3 -0.5 10 -1.6)
line(10 1.6 13 0)
line(10 -1.6 13 0)
#minute hand
line(0.5 0.5 -9 10.7)
line(-0.5 -0.5 -10.5 9.5)
line(-9 10.7 -14 14)
line(-10.5 9.5 -14 14)
#second hand
line(-2.5 -3 15 14)
line(-3 -2.5 14.5 14.7)
line(-2.5 -3 -3 -2.5)