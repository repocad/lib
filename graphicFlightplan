 from =      "EKVJ"
    to =        "EKRD"
    reg =       "OY-ABC"
    pilot =     "Pilot name here"

    tas =      95   # TAS in knots 
    lph =      12  # FUEL in Liters/hour
    alternate = 5    # fuel to alternate
    reserve =   10   # reserve fuel, liters
    glide =     8    # glide ratio 1:x
    deviation = 1

    #CHART SCALE FOR MINUTE MARKS
    scale = 500000
    speedMin = 80 #min GS (for minute lines)
    speedMax = 90 #max GS (for minute lines)

   #destinagion runway heading (shown on wind rose)
   landingRwyHdg = 250

#WP1
    title1 =   "VIDEBAEK"
    dist1 =    10
    tt1 =      70
    windDir1 = 135
    windVel1 = 10

#WP2
    title2 =   "IKAST"
    dist2 =    12
    tt2 =      30
    windDir2 = 100
    windVel2 = 10

#WP3
    title3 =   "KJELLERUP"
    dist3 =    18
    tt3 =      40
    windDir3 = 100
    windVel3 = 15

#WP4
    title4 =   "EKRD"
    dist4 =    20
    tt4 =      45
    windDir4 = 90
    windVel4 = 15

#WP5
    title5 =   " - - - "    
    dist5 =    0
    tt5 =      0
    windDir5 = 0
    windVel5 = 0

#WP6
    title6 =   " - - - "    
    dist6 =    0
    tt6 =      0
    windDir6 = 0
    windVel6 = 0

#WP7
    title7 =   " - - - "    
    dist7 =    0
    tt7 =      0
    windDir7 = 0
    windVel7 = 0


## END USER INPUT ##
## do not edit below this point

############ WAYPOINT CALCULATIONS ##############
import geometry2d
routeScale = 4
xDep = 0
yDep = 0
triangle(xDep yDep 3)
text(xDep yDep + 4 6 from) # TITLE

function cosPoint(angle) {
  a = cos(radians(tt1 - 90))
  a * dist1 * routeScale
}
 function sinPoint(angle) {
  a = sin(radians(tt1 - 90))
  a * dist1 * routeScale * -1
}

#### WPT1 ####

n1 = sin(radians(tt1 - windDir1))
wca1a = (windVel1 * n1)
wca1 = degrees(wca1a / tas * -1)
th1 = toInt(tt1 + wca1)
c1a = cos(radians(wca1))
c1b = cos(radians(tt1 - windDir1))
gs1a = tas * c1a
gs1b = windVel1 * c1b
gs1 = gs1a - gs1b
timeHr1 = dist1 / gs1
time1 = timeHr1 * 60

y = 60 # vertical offset

if (dist1 > 0) {
  1a = cos(radians(tt1 - 90))
  1b = sin(radians(tt1 - 90))

  x1 = 1a * dist1 * routeScale
  y1 = 1b * dist1 * routeScale * -1

  line(xDep yDep x1 y1)
  triangle(x1 y1 3)

  text(x1 y1 + 4 6 title1) # TITLE
}



###### WPT 2 ########

n2 = sin(radians(tt2 - windDir2))
wca2a = (windVel2 * n2)
wca2 = degrees(wca2a / tas * -1)
th2 = toInt(tt2 + wca2)
c2a = cos(radians(wca2))
c2b = cos(radians(tt2 - windDir2))
gs2a = tas * c2a
gs2b = windVel2 * c2b
gs2 = gs2a - gs2b
timeHr2 = dist2 / gs2
time2 = timeHr2 * 60 

y = 31 # vertical offset

if (dist2 > 0) {
   2a = cos(radians(tt2 - 90))
  2b = sin(radians(tt2 - 90))

  x2 = x1 + 2a * dist2 * routeScale
  y2 = y1 + 2b * dist2 * routeScale * -1

  line(x1 y1 x2 y2)
  triangle(x2 y2 3)

  text(x2 y2 + 4 6 title2) # TITLE

}

#### WPT3 ####

n3 = sin(radians(tt3 - windDir3))
wca3a = (windVel3 * n3)
wca3 = degrees(wca3a / tas * -1)
th3 = toInt(tt3 + wca3)
c3a = cos(radians(wca3))
c3b = cos(radians(tt3 - windDir3))
gs3a = tas * c3a
gs3b = windVel3 * c3b
gs3 = gs3a - gs3b
timeHr3 = dist3 / gs3
time3 = timeHr3 * 60 

if (dist3 > 0) {
     3a = cos(radians(tt3 - 90))
  3b = sin(radians(tt3 - 90))

  x3 = x2 + 3a * dist3 * routeScale
  y3 = y2 + 3b * dist3 * routeScale * -1

  line(x2 y2 x3 y3)
  triangle(x3 y3 3)

  text(x3 y3 + 4 6 title3) # TITLE
}


#### WPT4 ####

n4 = sin(radians(tt4 - windDir4))
wca4a = (windVel4 * n4)
wca4 = degrees(wca4a / tas * -1)
th4 = toInt(tt4 + wca4)
c4a = cos(radians(wca4))
c4b = cos(radians(tt4 - windDir4))
gs4a = tas * c4a
gs4b = windVel4 * c4b
gs4 = gs4a - gs4b
timeHr4 = dist4 / gs4
time4 = timeHr4 * 60 

y = -27 # vertical offset

if (dist4 > 0) {
 4a = cos(radians(tt4 - 90))
  4b = sin(radians(tt4 - 90))

  x4 = x3 + 4a * dist4 * routeScale
  y4 = y3 + 4b * dist4 * routeScale * -1

  line(x3 y3 x4 y4)
  triangle(x4 y4 3)

  text(x4 y4 + 4 6 title4) # TITLE
}